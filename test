List :
- list that will contain more than one element in it.
- sequence of value
list(string) =>[“red”, “green”, “blue”]
all the data type inside the sequesnce must be same

Tuple :
-group non homogeneous data type
-tuple([string, number, bool]) => [“dog”, 23, true]
-all the data type inside the sequence different
map :
Terraform also supports the map variable type where you can define the key-valye pair.
like key value : Dictionary
{name = “Ankit", age =
set:only unique values
object :complex data type

variable.tf
variable filename1 {
  type        = string
  default     = "sample1.txt"
}
/*
variable content1 {
  type        = number
  default     = 23
}
*/

/*
variable content1 {
  type        = bool
  default     = true
}
*/
/*
variable content1 {
  type        = list(string)
  default     = ["red", "green", "blue"]
}
*/

/*
variable content1 {
  type        = tuple([string,bool,number])
  default     = ["red", true, 23]
}
*/

variable content1 {
  type        = map
  default     = {name = "Ankit", age = 32}
}

main.tf

resource local_file sample_res {
  filename = var.filename1
  content = var.content1["name"]
}

Dependency :

resource local_file name1 {
  filename = "explicit.txt"
  content = "This is random String from RP : ${random_string.name2.id}"
  depends_on =  [random_string.name2]
}

resource random_string name2 {
  length  = 10
}

lifecycle Rules:
resource random_integer name {
  min = 20
  max = 350

    lifecycle{
        #create_before_destroy = true
        #prevent_destroy = true
        ignore_changes = [min, max]
    }

}

Provider version :
terraform {
  required_providers {
    random = {
      source = "hashicorp/random"
      version = "2.3.1"
    }
  }
}

provider "random" {
  # Configuration options
}


resource random_integer name {
  min = 0
  max = 100
}

terraform data sources :
data local_file foo {
  filename = "sample1.txt"
}

output name1 {
  value       = data.local_file.foo.content
}


